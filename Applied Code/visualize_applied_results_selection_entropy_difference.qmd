---
title: "Visualize Applied Results - Entropy Difference after Selection"
format: html
editor: visual
---

## Visualize Applied Results - Entropy Difference after Selection

```{r}
library(tidyverse)
library(sqldf)
```

```{r}
plot_df <- function (df) 
{
  df %>% mutate(t = 1:dim(df)[1]) %>% reshape2::melt(id.vars = "t") %>% 
    ggplot() + geom_line(aes(x = t, y = value, color = variable))
}

fir_convolve <- function(impulse_times, impulse_strengths, output_times){
  hrf_function <- function(t){
    if(t <= 0 || t >= 60){return(0)}
    (t^(5)*exp(-t)/gamma(6) - t^(15)*exp(-t)/gamma(16)/6)
  }
  
  #for each impulse, figure out what it's strength is at each of the output_times
  lapply(1:length(impulse_times), function(n){
    sapply(output_times, function(t2){
      impulse_strengths[n] * hrf_function(t2 - impulse_times[n])
    })
  }) %>% Reduce("+", .)
}

gg_color_hue <- function(n) {
  hues = seq(15, 375, length = n + 1)
  hcl(h = hues, l = 65, c = 100)[1:n]
}
```

```{r}
roi_names <- c("Anterior Cingulate Cortex", "Caudate", "Fusiform Gyrus", "Hippocampus",
               "Lateral Occipital Cortex", "Lingual Gyrus", "Nucleus Accumbens",
               "Parahippocampal Cortex", "Putamen")

K <- 2

temp <- vector(mode = "list", length = 8)
S <- lapply(1:8, function(sub){vector(mode = "list", length = K)})

for(sub in 1:8){
  load(sprintf("~/BTV-PPI/Applied Results/entropy_difference/subject_%s_entropy_difference_selection.RData", sub))
  temp[[sub]] <- result$par_cor_btvppi_selection
  
  load(sprintf("~/BTV-PPI/Applied Results/processed_data/sep_learned_subject_%s.RData", sub))
  load(sprintf("~/BTV-PPI/Applied Results/processed_data/behavior_subject_%s.Rdata", sub))
  
  temp1 <- data.frame(scan_times = model_data$scan_times)
  temp2 <- sqldf("select coalesce(lag(time) over (order by time), 0) as start_time,
        time as end_time, entropy_difference, self_self from behavior")
  
  entropy_difference <- sqldf("select scan_times, start_time, end_time, coalesce(entropy_difference, 0) as entropy_difference from temp1
        left join temp2 on (scan_times >= start_time and scan_times < end_time) ")$entropy_difference
  
  S[[sub]][[1]] <- fir_convolve(impulse_times = model_data$scan_times,
                         impulse_strengths = entropy_difference,
                         output_times = model_data$scan_times)
  
  ##second predictor is self-self transitions
  S[[sub]][[2]] <- fir_convolve(impulse_times = behavior$time,
                         impulse_strengths = behavior$self_self,
                         output_times = model_data$scan_times)
  
  rm(entropy_difference, temp1, temp2, behavior, model_data)
}
rm(result)
result <- temp
rm(temp, sub)
```

Now see what the partial correlation is between regions for the different subjects.

```{r}
plot_pc_over_time <- function(roi1, roi2){
  lapply(1:8, function(sub){
    N <- dim(result[[sub]])[3]
    result[[sub]][roi1, roi2,] %>% 
    data.frame(subject = as.factor(sub), pc = ., t = 1:N)
  }) %>% 
  Reduce("rbind", .) %>% 
  ggplot() +
    geom_line(aes(x = t, y = pc, color = subject)) +
    ggtitle(sprintf("Partial Correlation between %s and %s", roi_names[roi1], roi_names[roi2]))
}

lapply(2:9, function(p){
  plot_pc_over_time(roi1 = 1, roi2 = p)
})
```

The above partial correlations look really messy and don't seem to tell a clear pattern at all across subjects, even after selection and symmetry. I still want to look at what partial correlation as a function of convolved entropy looks like.

```{r}
plot_pc_over_entropy_diff <- function(sub, roi1, roi2){
  N <- dim(result[[sub]])[3]
  result[[sub]][roi1, roi2, ] %>% 
    data.frame(subject = as.factor(sub), pc = ., 
               entropy_diff = S[[sub]][[1]], t = 1:N) %>% 
    ggplot() +
      geom_point(aes(x = entropy_diff, y = pc, color = subject), alpha = 0.5) +
      scale_color_manual(breaks = sub,
                         values = gg_color_hue(8)[sub]) +
    coord_cartesian(ylim = c(-1,1)) +
    ggtitle(sprintf("Partial Correlation between
                    %s and %s", roi_names[roi1], roi_names[roi2])) +
    ylab("Partial Correlation") +
    xlab("Entropy Difference")
}

lapply(1:8, function(sub){
  plot_pc_over_entropy_diff(sub = sub, roi = 1, roi2 = 4)
})
```

I was hoping the partial correlation between the Hippocampus (associated with slow learning) and Anterior Cingulate Cortex would decrease as the difference between the slow and fast entropies increased, but that's not really what I'm seeing.

```{r}
lapply(1:8, function(sub){
  plot_pc_over_entropy_diff(sub = sub, roi = 1, roi2 = 9)
})
```

```{r}
plot_pc_over_entropy_diff_altogether <- function(roi1, roi2){
  lapply(1:8, function(sub){
    N <- dim(result[[sub]])[3]
    data.frame(pc = result[[sub]][roi1, roi2, ],
               subject = as.factor(sub),
               t = 1:N,
               entropy_diff = S[[sub]][[1]])
  }) %>% Reduce("rbind", .) %>% 
    ggplot(aes(x = entropy_diff, y = pc)) +
    geom_point(aes(color = subject), alpha = 0.2) +
    geom_smooth(method = "gam", aes(color = factor(subject)), show.legend = FALSE) +
    geom_smooth(method = "gam", color = "black", show.legend = FALSE) +
    labs(color = "Subject") +
    theme_minimal() +
    ylab("Partial Correlation") +
    xlab("Slow Entropy minus Fast Entropy") +
    ggtitle(sprintf("Partial Correlation between %s and %s", roi_names[roi1], roi_names[roi2]))
}

plot_pc_over_entropy_diff_altogether(roi1 = 1, roi2 = 4)

plot_pc_over_entropy_diff_altogether(roi1 = 1, roi2 = 2)
```

I need a plot of Slow minus Fast Entropy for a subject. I think I will focus on Subject 1.

```{r}
data.frame("entropy_diff" = S[[1]][[1]], 
           t = 1:length(S[[1]][[1]])) %>% 
  ggplot() +
  geom_line(aes(x = t, y = entropy_diff)) +
  theme_minimal() +
  ggtitle("Subject 1 Slow Entropy minus Fast Entropy") +
  ylab("Entropy Difference")

ggsave("images/Entropy_difference.png", 
       width = 8, height = 4)
```
